/*******************************
 * Problems 6.38 - 6.47*********
 * two problems unsolve 6.46 & 6.47
 ********************************/
 
 /****************6.38******************/
 /*
	I have writen a test program for this problem
	in test_for_6.38.c
	here is what the program print
			N = 64			N = 60
	sumA	0.25			0.25
	sumB	1.00			1.00
	sumC	1.00			0.50
*/


/************6.39 - 6.41******************/
/*
	I have writen a test program for those problems
	In test_for_6.39-6.41.c
	6.39
	writen		:	1024
	miss		:	63
	miss rate	:	0.062
	6.40
	writen		:	1024
	miss		:	255
	miss rate	:	0.249
	6.41
	writen		:	1024
	miss		:	127
	miss rate	:	0.124
*/


/************6.42 - 6.44****************/
/*
	6.42 6.43 	: 25% // 4 bytes block only occur cold miss
	6.44		: 100%	// write in a 4 bytes block and miss every times
*/


/* omit 6.45 */

/****************** 6.46 ********************/
/*
	void transpose(int *dst, int *src, int dim)
	{
		int i, j;
		
		for (i = 0; i < dim-8; i+=8)
			for (j = 0; j < dim; j++)
			{
				/* unrolling to reach better locality */
				dst[j*dim + i] = scr[i*dim + j];
				dst[j*dim + i+1] = scr[(i+1)*dim + j];
				dst[j*dim + i+2] = scr[(i+2)*dim + j];
				dst[j*dim + i+3] = scr[(i+3)*dim + j];
				dst[j*dim + i+4] = scr[(i+4)*dim + j];
				dst[j*dim + i+5] = scr[(i+5)*dim + j];
				dst[j*dim + i+6] = scr[(i+6)*dim + j];
				dst[j*dim + i+7] = scr[(i+7)*dim + j];
			}
		for (; i < dim; i++)
			for (j = 0; j < dim; j++)
				dst[j*dim + i] = src[i*dim + j];
	}
*/


/***************** 6.47 *******************/
/*
	void col_convert(int *G, int dim)
	{
		int i, j;
		
		for (i = 0; i < dim-8; i+=8)
			for (j = 0; j < dim - i; j++)
			{
				G[j*dim + i] = G[i*dim + j] = G[j*dim + i] || G[i*dim + j];
				G[j*dim + i+1] = G[(i+1)*dim + j] = G[j*dim +i+1] || G[(i+1)*dim + j];
				G[j*dim + i+2] = G[(i+2)*dim + j] = G[j*dim +i+2] || G[(i+2)*dim + j];
				G[j*dim + i+3] = G[(i+3)*dim + j] = G[j*dim +i+3] || G[(i+3)*dim + j];
				G[j*dim + i+4] = G[(i+4)*dim + j] = G[j*dim +i+4] || G[(i+4)*dim + j];
				G[j*dim + i+5] = G[(i+5)*dim + j] = G[j*dim +i+5] || G[(i+5)*dim + j];
				G[j*dim + i+6] = G[(i+6)*dim + j] = G[j*dim +i+6] || G[(i+6)*dim + j];
				G[j*dim + i+7] = G[(i+7)*dim + j] = G[j*dim +i+7] || G[(i+7)*dim + j];
			}
		for (; i < dim; i++)
			for (j = 0; j < dim-i; j++)
				G[j*dim + i] = G[i*dim + j] = G[j*dim + i] || G[i*dim + j];
	}
*/
// have not been test, not sure whether it's correct or not
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	