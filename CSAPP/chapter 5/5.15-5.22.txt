/* Problems 5.15 - 5.22 */


/* 5.15 */

/*
	A. omit the diagram. It's easy to draw it out with the figures 5.13 on book
	B. floating-point add-op is the critical path (and CPE equal to 3.00)
	C. Two load-ops and a add-op. (CPE 3.00) (load-op can't parallel in 5.12.1)
	   but actually I'm not sure whether or not the add-op can be parallel with load-ops.
	D. Because the floating-point multiplication can parallel operation while the add-op
	   must be wait until the last add-op finished.
*/


/* 5.16 */


/* Accumulate in temporary */
void inner4(vec_ptr u, ver_ptr v, data_t *dest)
{
	long int i;
	int length = vec_length(u);
	int length_unro = length-4;
	data_t *udata = get_vec_start(u);
	data_t *vdate = get_vec_start(v);
	data_t sum = (data_t) 0;
	
	for (i = 0; i < length_unro; i += 4)
	{
		sum += udata[i] * vdate[i];
		sum += udata[i+1] * vdate[i+2];
		sum += udata[i+3] * vdate[i+3];
		sum += udata[i+4] * vdate[i+4];
	}
	
	/* calculate the remained value */
	for (; i < length; i++)
	{
		sum0 +=  udata[i] * vdate[i];
	}
	*dest = sum0;
}

/*
	A. Because it needs two load-ops and that's the restriction.
	B. There are 4 floating-point add-ops in the critical path.
	   So it won't be less than 3.00.
*/


/* 5.17 */

/* Accumulate in temporary */
void inner4(vec_ptr u, ver_ptr v, data_t *dest)
{
	long int i;
	int length = vec_length(u);
	int length_unro = length - 4;
	data_t *udata = get_vec_start(u);
	data_t *vdate = get_vec_start(v);
	data_t sum0 = (data_t) 0;
	data_t sum1 = (data_t) 0;
	data_t sum2 = (data_t) 0;
	data_t sum3 = (data_t) 0;
	
	/* the numbers of resiger should be enough in x86-64 */
	for (i = 0; i < length_unro; i += 4)
	{
		sum0 += udata[i] * vdate[i];
		sum1 += udata[i+1] * vdate[i+2];
		sum2 += udata[i+3] * vdate[i+3];
		sum3 += udata[i+4] * vdate[i+4];
	}
	sum0 += sum1 + sum2 + sum3;
	
	/* calculate the remained value */
	for (; i < length; i++)
	{
		sum0 +=  udata[i] * vdate[i];
	}
	*dest = sum0;
}

/*
	A. Needs two load-ops so CPE must greater than 2. (chapter 5.12.1)
	B. There are only 6 usable registers in IA32 and registers spilling make procedure slower
*/


/* 5.18 */
// I think it's actually the same question as the upper.


/* 5.19 */

/* I'm no sure whether I'm correct or not since I have not ever run it on any machine */
void *basic_memset(void *s, int c, size_t n)
{
	size_t K = sizeof(unsigned long);
	unsigned long mask = 0;
	unsigned long *slong = s;
	unsigned char *schar;
	int n_unrol = 4 * K;
	int length = n - n_unrol;
	int i = 0;
	unsigned char unc = (unsigned char)c;
	
	for (i = 0; i < K; i++)
	{
		mask |= (c << (i * sizeof(int)));
	}
	
	for (i = 0; i < length; i += n_unrol)
	{
		*(slong) = mask;
		*(slong+1) = mask;
		*(slong+2) = mask;
		*(slong+3) = mask;
	}
	
	schar = (unsigned char *)slong;
	while (i < n)
	{
		*schar++ = unc;
		i++;
	}
	return s;
}


/* 5.20 */

/* Evaluating a polynomial where degree n is define by a0, a1, ..., an. */
double poly(double a[], double x, int degree)
{
	long int i;
	double result = 0;
	double r1 = 0;
	double r2 = 0;
	double power4 = 1;
	double x_2 = x * x;
	double x_4 = x_2 * x_2;
	
	/* unrolling by 4. and I believe the critical path is only the doub floating-point
	   add-op. But notice that there are 5 double floating-point mutiply-ops in a single
	   loop, it have to take more than 5 per loop. So the CPE is 5.00/4 = 1.25 */
	for (i = 0; i <= degree; i += 4)
	{
		r1 = a[i] + a[i+1] * x;
		r2 = a[i+2] + a[i+3] * x;
		r1 = r1 + r2 * x_2;
		result = result + r1 * power4;
		power4 *= x_4;
	}
	
	for (; i <= degree; i++)
	{
		result = result + a[i] * power4;
		power4 *= x;
	}
	return x;
}


/* 5.21 */

/* compute prefixsum of vector a */
void psum1(float a[], float p[], long int n)
{
	int i = 0;
	int length = n - 2;
	int temp;
	int a = 0;
	p[0] = a[0];
	
	/* I think that unrolling by 2 and unrolling by 3 are actually have the identical
	   CPE. Though both their critical path are a floating-point add-op. But there are
	   4 floating-point add-ops in unrolling by 2 and 6 in unrolling by 3. So I believe
	   that their CPE won't less than 2.00, and that's true in load-ops restriction */
	for (i = 1; i < length; i += 2)
	{
		a = a[i]; // for less load-ops
		temp = a + a[i+1];
		
		p[i] = result + a;
		p[i+1] = result + temp;
		result = result + temp;
	}
	
	for (; i <= n; i++)
	{
		result = result + a[i];
		p[i] = result;
	}
}


/* 5.22 */
/*
	B may be a better choice.
*/

