/***********************************************
		Exercise 2.21 - 2.30
***********************************************/


 /****************** 2.21 **********************/
 
 #lang planet neil/sicp

; Exercise 2.21

(define (square x) (* x x))

; square-list1 : s_list
; squares every items in the given list
(define (square-list1 items)
  (if (null? items)
      nil
      (cons (square (car items))
            (square-list1 (cdr items)))))

; square-list2 : s_list
; squares every items in the given list
(define (square-list2 items)
  (map square items))
  
  
 /****************** 2.22 **********************/
 
 Obviously, It can't work correctly caz, when you 'cons'
 the currently element and previous answers, with the 
 previous answers behind, you just put the previous answers
 in the end of the list.
 consider the second procedure 'cons' as a tree, you always
 put your previous answers into the left sub-tree, that product
 a wrong answer.
 
 
 /****************** 2.23 **********************/
 
 ; Exercise 2.23

; for-each-my-v : procedure, s_list
; applies the procedure to each items in the given list
(define (for-each-my-v f items)
  (define (for-each-iter lst)
    (cond ((not (null? lst))
            (f (car lst))
            (for-each-iter (cdr lst)))))
  (for-each-iter items))
  
  
 /****************** 2.24 **********************/
 /****************** 2.25 **********************/
 /****************** 2.26 **********************/
 skip.
 
 /****************** 2.27 **********************/
 
 ; deep-reverse : s_tree
; reverse sub-trees of each node in the given tree
(define (deep-reverse tree)
  (cond ((null? tree)
         nil)
        ((not (pair? tree))
         tree)
        (else
         (reverse (list (deep-reverse (car tree))
                        (deep-reverse (cadr tree)))))))
 
 /****************** 2.28 **********************/
 
 ; Exercise 2.28

; fringe : s_tree
; Convert the whole tree to a list whose elements are 
; the node of the given tree
(define (fringe tree)
  (cond ((null? tree)
         nil)
        ((not (pair? tree))
         tree)
        (else
         (append (car tree)
                 (cdr tree)))))
 
 /****************** 2.29 **********************/
 
 #lang planet neil/sicp

; Exercise 2.29

; make-mobile : s_list, s_list (rec)
(define (make-mobile left right)
  (list left right))

; make-branch : int, s_list
(define (make-branch length structure)
  (list length structure))

; left-branch : s_tree(list)
; Selector
(define (left-branch branch)
  (car branch))

; right-branch : s_tree(list)
; Selector
(define (right-branch branch)
  (cadr branch))

; branch-length : s_list
; return the length of given branch
(define (branch-length branch)
  (car branch))

; branch-structure : s_list
; return the structure of given branch
(define (branch-structure branch)
  (cadr branch))

; branch-weigth : s_list
; returun the 

; total-weigth : s_tree
; return the total weigth of a given branch
(define (total-weigth branch)
  (let ((left-is-branch? (is-a-branch? (left-branch branch)))
        (right-is-branch? (is-a-branch? (right-branch branch))))
    (cond (left-is-branch? ; if left is a branch then right must be a branch
           (+ (total-weigth (left-branch branch))
              (total-weigth (right-branch branch))))
          (right-is-branch?
           (total-weigth (right-branch branch)))
          (else
           (branch-structure branch)))))

; is-a-branch : s_list
; return TRUE if the given list is a branch
(define (is-a-branch? branch)
  (pair? branch))
  
  ; torque-branch : s_list
; return the torque of a given branch
(define (torque-branch branch)
  (* (branch-length branch)
     (total-weigth branch)))

; balanced? : s_tree
; return TRUE if the given branch IS balanced
(define (balanced? branch)
   (let ((left (left-branch branch))
         (right (right-branch branch))
         (left-is-branch? (is-a-branch? (left-branch branch)))
         (right-is-branch? (is-a-branch? (right-branch branch))))
     (cond (left-is-branch?
            ; if left is a branch then right must be a branch
            (and (balanced? left)
                 (balanced? right)
                 (= (torque-branch left)
                    (torque-branch right))))
           (right-is-branch?
            (balanced? right))
           (else; if branch is a single branch
            #t))))
			
			
 there are only two functions that I need to change
 right-branch and branch-structure
  
 /****************** 2.30 **********************/
 
 ; Exercise 2.30

; square : int
(define (square x) (* x x))

; square-tree : s_tree
; return a tree whose nodes' value are squares of given tree
(define (square-tree tree)
  (cond ((null? tree)
         nil)
        ((not (pair? tree))
         (square tree))
        (else
         (cons (square-tree (car tree))
              (square-tree (cdr tree))))))
 
 
 
 