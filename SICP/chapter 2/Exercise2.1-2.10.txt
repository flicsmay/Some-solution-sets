/***********************************************
		Exercise 2.1 - 2.10
***********************************************/


 /****************** 2.1 **********************/
 
(define (make-rat n d)
  (let ((g (gcd n d)))
    (if (< d 0)
        (cons (- (/ n g)) (- (/ d g)))
        (cons (/ n g) (/ d g)))))

(define numer car)

(define denom cdr)

(define (print-rat x)
  (display (numer x))
  (display "/")
  (display (denom x)))
  
  > (print-rat (make-rat -8 9))
-8/9
> (print-rat (make-rat -8 -9))
8/9
> (print-rat (make-rat 8 9))
8/9
> (print-rat (make-rat 8 -9))
-8/9


 /****************** 2.2 **********************/
 
 (define (make-segment start-point end-point)
  (cons start-point end-point))

(define (start-point segment)
  (car segment))

(define (end-point segment)
  (cdr segment))

; make segment

(define (make-point x y)
  (cons x y))

(define (x-point point)
  (car point))

(define (y-point point)
  (cdr point))

; make point

(define (midpoint-segment segment)
  (let ((start-p (start-point segment))
        (end-p (end-point segment)))
    (cons (/ (+ (x-point start-p)
                (x-point end-p))
             2)
          (/ (+ (y-point start-p)
                (y-point end-p))
             2))))

; mid point of segment

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

; print point
 
> (define start (cons 0 0))
> (define end (cons 8 10))
> (define seg (make-segment start end))
> (print-point (mid-segment seg))
> (print-point (midpoint-segment seg))

(4,5)
 
 
 /****************** 2.3 **********************/
 
 #lang planet neil/sicp

(define (make-segment start-point end-point)
  (cons start-point end-point))

(define (start-point segment)
  (car segment))

(define (end-point segment)
  (cdr segment))

; make segment

(define (make-point x y)
  (cons x y))

(define (x-point point)
  (car point))

(define (y-point point)
  (cdr point))

; make point

(define (midpoint-segment segment)
  (let ((start-p (start-point segment))
        (end-p (end-point segment)))
    (cons (/ (+ (x-point start-p)
                (x-point end-p))
             2)
          (/ (+ (y-point start-p)
                (y-point end-p))
             2))))

; mid point of segment

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

; print point

(define (square x) (* x x))

(define (length-of-segment seg)
  (let ((x-interval (- (x-point (end-point seg))
                       (x-point (start-point seg))))
        (y-interval (- (y-point (end-point seg))
                       (y-point (start-point seg)))))
    (sqrt (+ (square x-interval)
             (square y-interval)))))


(define (perimeter-rectangle rect)
  (let ((length (length-of-rectangle rect))
        (width (width-of-rectangle rect)))
    (* 2
       (+ length width))))

(define (area-rectangle rect)
  (let ((length (length-of-rectangle rect))
        (width (width-of-rectangle rect)))
    (* length
       width)))
       
; area with perimeter procedure

(define (make-rectangle length-seg width-seg)
  (cons length-seg width-seg))

(define (length-of-rectangle rect)
  (length-of-segment (car rect)))

(define (width-of-rectangle rect)
  (length-of-segment (cdr rect)))

 /****************** 2.4 **********************/
 
 (define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))
  
 ; may be right, may be not
 
 
 /****************** 2.5 **********************/
 
 #lang planet neil/sicp

(define (cons a b)
  (let ((left (fast-expt 2 a))
        (right (fast-expt 3 b))
        )
    (lambda (m) (m left right))))

; constructor

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))

; selector

(define (fast-expt b n)
  (define (square x) (* x x))
  
  (define (inner-loop base index result)
    (cond ((= index 0) result)
          ((even? index) (inner-loop (square base)
                                     (/ index 2)
                                     result))
          (else (inner-loop base
                            (- index 1)
                            (* result base)))))
  
  (define (even? n)
    (= (remainder n 2) 0))
  
  (if (< n 1)
      1
      (inner-loop b n 1)))
   
; fast-expt iteration


 /****************** 2.6 **********************/
 
#lang planet neil/sicp

(define zero (lambda (f) (lambda (x) x)))
; that is take one argument and never return 


; in fact I have totally no idea about how to solve this problem


 /****************** 2.7 **********************/
 
 #lang planet neil/sicp

(define (make-interval a b)
  (cons a b))

; constructor

(define (lower-bound z)
  (car z))

(define (upper-bound z)
  (cdr z))

; selector

; add-interval book version

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

; mul-interval
; in book version
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

; divide interval
; version found in book
(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

 /****************** 2.8 **********************/

 ; subtract interval
; problem 2.8
(define (sub-interval x y)
  (add-interval x
                (make-interval (- (lower-bound y))
                               (- (upper-bound y)))))

 /****************** 2.9 **********************/

 That's true, because there are a equations
	upper' = upper1 + upper2
	lower' = lower1 + lower2
 and as the consequence
	(upper'-lower')/2 = (upper1-lower1)/2 + (upper2-lower2)/2
 but when it get to the multiply and division width is also
 determine by the actual numbers
 
/****************** 2.10 **********************/
 
 ; interval division
; forbid the division that try to divide an interval spans zero
(define (div-interval x y)
  (if (and (> (upper-bound y) 0) (< (lower-bound y) 0))
      (display "divide an interval that spans zero is forbidden")
      (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y))))))
 
 
 
 
 
 
 