/***********************************************
		Exercise 2.81 - 2.90
***********************************************/
 
 
 /****************** 2.81 **********************/
 
 a : the program will drop into an infinity loop.
 
 b : nope
 
 c : 
 (define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
        (let ((proc (get op type-tags)))
            (if proc
                (apply proc (map contents args))
                (if (= (length args) 2)
                    (let ((type1 (car type-tags))
                          (type2 (cadr type-tags))
                          (a1 (car args))
                          (a2 (cadr args)))
                        (if (equal? type1 type2)  ; if two types are equal then complain the mistaken    
                            (error "No method for these types" (list op type-tags))
                            (let ((t1->t2 (get-coercion type1 type2))
                                  (t2->t1 (get-coercion type2 type1)))
                                (cond (t1->t2
                                        (apply-generic op (t1->t2 a1) a2))
                                      (t2->t1
                                        (apply-generic op a1 (t2->t1 a2)))
                                      (else
                                        (error "No method for these types"
                                                (list op type-tags)))))))
                    (error "No method for these types"
                            (list op type-tags)))))))
 
 /****************** 2.82 **********************/
 
 
 ; apply-generic

(define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
        (let ((proc (get op type-tags)))
            (if proc
                (apply proc (map contents args))
                (let ((result (get-coercion-list type-tags args)))
                  (if result
                      (let ((type-tags (map type-tag result)))
                        (let ((proc (get op type-tags)))
                          (apply proc (map contents result))))
                      (error "No method for these types" (list op type-tags))))))))

; get-coercion-list : type-list, args-list
; if the list can be transformed to a list that have a same type
; then return the transformed list otherwise return FALSE
(define (get-coercion-list type-args args)
  (define (iter rest)
    (if (null? rest)
        #f
        (let ((current (car rest)))
          (let ((result (all-coercion? current type-args args)))
            (if result
                result
                (iter (cdr rest)))))))
  (iter type-args))

; all-coercion : type(compared), type-list, args-list
; if all elements in type-list can be transformed to given type
; then return the transformed list otherwise return FALSE
(define (all-coercion? type type-args args)
  (define (iter rest-types rest-args result)
    (if (null? rest-types)
        result
        (let ((curr-type (car rest-types))
              (next-type (cdr rest-types))
              (curr-arg (car rest-args))
              (next-arg (cdr rest-args))
              (coer-op (get-coercion (car rest-types) 
                                     type))
              )
          (cond ((eq? type curr-type)
                 (iter next-type 
                       next-arg 
                       (append result (list curr-arg))))
                (coer-op
                 (iter next-type
                       next-arg 
                       (append result (list (coer-op curr-arg)))))
                (else
                 #f)))))
  (iter type-args args '()))
  
  test:
 
(put-coercion 'number 'square-number square)
> (define z '(number number square-number number))
> (all-coercion? 'square-number z (list 4 4 4 4))
'ok
#<procedure:>>
#<procedure:>>
(mcons 16 (mcons 16 (mcons 4 (mcons 16 '()))))

> (put-coercion 'number 'square-number square)
'ok
> (define z '(number number square-number number))
> (get-coercion-list z (list 4 4 4 4))
(mcons 16 (mcons 16 (mcons 4 (mcons 16 '()))))
> 
> (define (scheme2complex num)
  (make-complex-from-real-imag num 0))
> (put-coercion 'scheme-number 'complex scheme2complex)
> (install-all)
> (define a (make-scheme-number 5))
> (define b (make-complex-from-real-imag 4 5))
> (add a b)
#<procedure:>>
'ok
#<procedure:>>
'done
#<procedure:>>
#<procedure:>>
#<procedure:>>
(mcons 'complex (mcons 'rectangular (mcons 9 5)))
 
 /****************** 2.83 **********************/
 
 (define (scheme2complex num)
  (make-from-real-imag num 0))

(define (raise-to-rational scheme-num)
  (make-rational (contents scheme-num) 1))

(put 'raise 'scheme-number raise-to-rational)

(define (raise-to-real rational-num)
  (make-real (/ (numer rational-num) (demon rational-num))))

(put 'raise 'rational raise-to-real)

(define (raise-to-complex real-num)
  (make-complex-from-real-imag (contents real-num) 0))

(put 'raise 'real raise-to-complex)

(define (raise x) (apply-generic 'raise x))
 
 /****************** 2.84 **********************/
 
 ; apply-generic

(define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
        (let ((proc (get op type-tags)))
            (if proc
                (apply proc (map contents args))
                (if (= (length args) 2)
                    (let ((type1 (car type-tags))
                          (type2 (cadr type-tags))
                          (a1 (car args))
                          (a2 (cadr args)))
                        (let ((comparison (which-is-higher type1 type2)))
                          (cond ((= 0 comparison)
                                 (error "No method for these types" (list op type-tags)))
                                ((= 1 comparison)
                                 (let ((a1 (raise-to-type type2 a1)))
                                   (apply-generic op a1 a2)))
                                ((= -1 comparison)
                                 (let ((a2 (raise-to-type type1 a2)))
                                   (apply-generic op a1 a2)))
                                (else
                                 (error "Unkonwn mistaken..")))))
                                
                    (error "No method for these types"
                            (list op type-tags)))))))

(define (get-level type)
  (cond ((eq? 'scheme-number type)
         0)
        ((eq? 'rational type)
         1)
        ((eq? 'complex type)
         2)
        (else
         (error "Unkonwn-type -- GET-LEVEL" (list type)))))

(define (which-is-higher type1 type2)
  (let ((lv1 (get-level type1))
        (lv2 (get-level type2)))
    (cond ((= lv1 lv2)
           0)
          ((< lv1 lv2)
           1)
          ((> lv1 lv2)
           -1)
          (else
           (error "Unkonwn mistaken -- WHICH-IS-HIGER" (list type1 type2))))))

(define (raise-to-type type val)
  (let ((level (get-level type)))
    (define (iter result)
      (let ((curr-level (get-level (type-tag result))))
        (if (= curr-level level)
            result
            (iter (raise result)))))
    (iter val)))
 
 ; full code can be found in 2.84.rsk
 
 /****************** 2.85 **********************/
 
 ; complex-number
  
  (define (project-to-real complex-num)
    (make-real (real-part complex-num)))
 
  (put 'project '(complex) project-to-real)
  
  (put 'equ? '(complex complex)
        (lambda (x y)
            (and (= (real-part x) (real-part y))
                 (= (imag-part x) (imag-part y)))))
  
  ; real-number
  
  (define (project-to-rational real)
    (define accuracy 0.001)
    (define (whole-number? n)
      (= (round n) n))
    (define (iter numer denom)
      (let ((numer-appro (round numer)))
        (let ((curr (/ numer denom))
              (appro (/ numer-appro denom)))
          (if  (< (abs (- appro curr))
                  accuracy)
               (make-rational numer denom)
               (iter (* numer 10) (* denom 10))))))
    (iter real 1))
  
  (put 'project '(real) project-to-rational)
  
  (put 'equ? '(real real)
       (lambda (x y) (= x y)))
  
  
  ; rational-number
  
  (define (project-to-integer rational)
    (make-scheme-number (round (/ (numer rational)
                                  (denom rational)))))
  
  (put 'project '(rational) project-to-integer)
  
  (put 'equ? '(rational rational)
        (lambda (x y)
            (and (= (numer x) (numer y))
                 (= (denom x) (denom y)))))
  
  ; scheme-number
    
  
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (= x y)))
  
  
  ; global procedure
  
  (define (project n)
    (apply-generic 'project n))
  
  (define (equ? x y)
    (apply-generic 'equ? x y))
  
  (define (can-be-dropped? n)
    (if (get 'project (list (type-tag n)))
        (let ((projected (project n)))
          (if (get 'raise (list (type-tag projected)))
              (let ((retrived (raise projected)))
                (equ? retrived n))
              #f))
        #f))
  
  (define (drop n)
    (define (drop-iter current)
      (if (can-be-droped? current)
          (drop-iter (project current))
          current))
    (drop-iter n))
 
 /****************** 2.86 **********************/
 
  (define (add-complex z1 z2) 
   (make-from-real-imag (add (real-part z1) (real-part z2)) 
                        (add (imag-part z1) (imag-part z2)))) 
 (define (sub-complex z1 z2) 
   (make-from-real-imag (sub (real-part z1) (real-part z2)) 
                        (sub (imag-part z1) (imag-part z2)))) 
 (define (mul-complex z1 z2) 
   (make-from-mag-ang (mul (magnitude z1) (magnitude z2)) 
                      (add (angle z1) (angle z2)))) 
 (define (div-complex z1 z2) 
   (make-from-mag-ang (div (magnitude z1) (magnitude z2)) 
                      (sub (angle z1) (angle z2)))) 
  
  
  then add the sine and cosine procedure into package.
  
  work correctly without drop procedure
 
 /****************** 2.87 **********************/
 
 (define (zero-poly? poly) 
   (define (zero-terms? termlist) 
     (or (empty-termlist? termlist) 
         (and (=zero? (coeff (first-term termlist))) 
              (zero-terms? (rest-terms termlist))))) 
   (zero-terms? (term-list poly))) 
   
   
 (put '=zero? '(polynomial) zero-poly?)   

 
 /****************** 2.88 **********************/
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 