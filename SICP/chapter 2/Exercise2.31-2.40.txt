/***********************************************
		Exercise 2.31 - 2.40
***********************************************/
 
 
 /****************** 2.31 **********************/
 
 ; Exercise 2.31

; tree-map : #procedure, s_tree
; applies #proc to every nodes in the given tree
(define (tree-map f tree)
  (cond ((null? tree)
         nil)
        ((not (pair? tree))
         (f tree))
        (else
         (cons (tree-map f (car tree))
               (tree-map f (cdr tree))))))

; square-tree : s_tree
(define (square-tree tree) (tree-map square tree))


; square : int
(define (square x) (* x x))

 /****************** 2.32 **********************/
 
 ; Exercise 2.32

; subsets : s_list
; return a list of subsets of the given list
(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (x)
                            (cons (car s) x))
                          rest)))))
						
 /****************** 2.33 **********************/
 
 (define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y))
              nil
              sequence))

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y))
              0
              sequence))

 /****************** 2.34 **********************/
 
 ; horner-eval : int_x, s_list_coef
; calculate a polynomial with horner-method 
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff
                   (* x higher-terms)))
              0
              coefficient-sequence))
 
 /****************** 2.35 **********************/
 
 ; count-leaves : s_tree
; count the leaves of a given tree
(define (count-leaves tree)
  (accumulate +
              0
              (map (lambda (sub-tree)
                     (if (pair? sub-tree)
                         (count-leaves sub-tree)
                         1))
                   tree)))
 
 /****************** 2.36 **********************/
 
 ; Exercise 2.36

; accumulate-n : #operation, initial, sequence[s]
; calculate the accumulate of the given sequence[s] respectively
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init 
                        (map (lambda (x) (car x)) seqs))
            (accumulate-n op init
                          (map (lambda (x) (cdr x)) seqs)))))
 
 /****************** 2.37 **********************/
 
 #lang planet neil/sicp

; Exercise 2.37

; dot-product : s_vector, s_vector
; return the sums of v[i]*w[i]
(define (dot-product v w)
  (accumulate + 0 (map * v w)))


; matrix-*-vector : s_matrix, s_vector
; return the vector of r[i] = sumof m[i][j]*v[j]
(define (matric-*-vector m v)
  (map (lambda (col)
         (dot-product col v))
       m))

; transpose : s_matrix
; return the matrix n, where n[i][j] = m[j][i]
(define (transpose mat)
  (accumulate-n cons '() mat))


; matrix-*-matrix : s_matrix, s-matrix
; return the matrix of r[i][j] = sumof m[i][j]*n[j][k]
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matric-*-vector cols row)) m)))



; accumulate-n : #operation, initial, sequence[s]
; calculate the accumulate of the given sequence[s] respectively
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init 
                        (map (lambda (x) (car x)) seqs))
            (accumulate-n op init
                          (map (lambda (x) (cdr x)) seqs)))))


; accumulate : #operation, initial, s_list/s_tree
; #oper to every elements in the structure together with an initial value
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
 
 /****************** 2.38 **********************/
 
 1 1/2
1/6
(mcons 1 (mcons (mcons 2 (mcons (mcons 3 (mcons '() '())) '())) '()))
(mcons (mcons (mcons '() (mcons 1 '())) (mcons 2 '())) (mcons 3 '()))
 
 /****************** 2.39 **********************/
 
 ; Exercise 2.39

; reverse-fr : s_list
; reverse a given list, implememted with fold-right
(define (reverse-fr sequence)
  (fold-right (lambda (x y) (append y (list x)))
              nil
              sequence))

; reverse-fl : s_list
; reverse a given list, implemented with fold-left
(define (reverse-fl sequence)
  (fold-left (lambda (x y) (cons y x))
             nil
             sequence))
 
 /****************** 2.40 **********************/
 
 ; Exercise 2.40

; unique-pairs : int_n
; generates the sequence of pair (i, j) with 1 <= j < i <= n
(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j) (list i j))
                  (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n)))

; prime-sum-pairs-modify : int_n
; return a list of pairs whose sum are prime
(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum? (unique-pairs n))))

; flatmap : #proc, s_list
; append results which are the map of seq together
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

; prime-sum? : s_pair
; return TRUE if the sum of the given pair is prime
(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

; make-pair-sum : pair
; make (pair, sum-of-pair)
(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

; permutatoins : s_set(list)
; generate all the permutations of the given set
(define (permutations s)
  (if (null? s)
      (list nil)
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x s))))
               s)))

; remove : item, s_list
; remove the specfic item from the given list
(define (remove item sequence)
  (filter (lambda (x) (not (= x item)))
          sequence))


; =================================================================

; filter : #procedure, s_list/s_tree
; go through the every elements of the given tree/list with #pro
; eliminates all elements but those whose predication are TRUE
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else
         (filter predicate (cdr sequence)))))

; accumulate : #operation, initial, s_list/s_tree
; #oper to every elements in the structure together with an initial value
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

; enumerate-interval : int_low, int_high
; go through the integer list from low to high
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (square n) (* n n))
  (define (divides? a b)
    (= (remainder b a) 0))
  
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))
 
 
 
 
 
 
 