/***********************************************
		Exercise 1.41 - 1.46
***********************************************/


 /****************** 1.41 **********************/
 
 it returns 21
 ; expand the outer double : (double double) (double double)
 ; both the left side and the right side are mutiply a procedure by 4
 ; and it turn out to be plus 16
 
 
 /****************** 1.42 **********************/
 
 (define (compose f g)
  (lambda (x)
    (f (g x))))
	
 
 /****************** 1.43 **********************/
 
 (define (compose f g)
  (lambda (x)
    (f (g x))))

(define (square x) (* x x))

(define (inc x) (+ 1 x))

(define (repeated f n)
  (define (inner-loop index result)
    (if (< index 1)
        result
        (compose f result)))
  (inner-loop n f))
  
  
 /****************** 1.44 **********************/
 
 (define dx 0.0001)

(define (smooth f)
  (lambda (x) (/ (+ (f (- x dx))
                    (f x)
                    (f (+ x dx)))
                 3)))

(define (smooth-n-times f n)
  ((repeated smooth n) f))
 
 
 /****************** 1.45 **********************/
 
 ; after testing knows that k = log (2)n where k is the times
 ; of deboost n is the roots
 
 (define (fast-expt b n)
  (define (square x) (* x x))
  
  (define (inner-loop base index result)
    (cond ((= index 0) result)
          ((even? index) (inner-loop (square base)
                                     (/ index 2)
                                     result))
          (else (inner-loop base
                            (- index 1)
                            (* result base)))))
  
  (define (even? n)
    (= (remainder n 2) 0))
  
  (if (< n 1)
      1
      (inner-loop b n 1)))
   
; fast-expt iteration

(define (average x y) (/ (+ x y) 2))

(define (average-damp f)
  (lambda (x) (average x (f x))))

; average damp

(define (fixed-point f frist-guess)
  
  (define tolerance 0.00001)
  
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try frist-guess))

; fixed point func

(define (compose f g)
  (lambda (x)
    (f (g x))))

(define (repeated f n)
  (define (inner-loop index result)
    (if (<= index 1)
        result
        (inner-loop (- index 1)
                    (compose f result))))
  (inner-loop n f))

; repeated function

(define (n-roots-f x n)
  (lambda (y) (/ x (fast-expt y (- n 1)))))

; n roots

(define (n-times-deboost n)
  (repeated average-damp n))

; n times deboost

(define (xs-n-roots-with-k-damp x n k)
  (fixed-point ((n-times-deboost k) (lambda (y) (/ x (fast-expt y (- n 1)))))
               1.0))

; x's n roots using k deboots

(define (lg n)
  (/ (log n) (log 2)))

; lg n

(define (x-n-roots x n)
  (xs-n-roots-with-k-damp x n (lg n)))
  
 
 /****************** 1.46 **********************/
 
 (define (iterative-improve good-enough? improve-guess)
  (lambda (guess)
    
    (define (inner-loop guess)
      (if (good-enough? guess)
          guess
          (inner-loop (improve-guess guess))))
    
    (inner-loop guess)))

; iterative improve

(define (sqrt-iter guess x)
  
  (define (good-enough? guess)
    (< (abs (- (* guess guess) x)) 0.001))
  
  (define (improve guess)
    (/ (+ guess
          (/ x guess))
       2))
  
  ((iterative-improve good-enough? improve) guess))

(define (sqrt x)
  (sqrt-iter 1.0 x))

; sqrt

(define (fixed-point f first-guess)
  
  (define tolerance 0.00001)
  
  (define (close-enough? guess)
    (let ((compares (f guess)))
      (< (abs (- guess compares)) tolerance)))
  
  (define (try guess)
    (f guess))
  
  ((iterative-improve close-enough? try) first-guess))
 
 
 
 
 
 
 
 
 
 