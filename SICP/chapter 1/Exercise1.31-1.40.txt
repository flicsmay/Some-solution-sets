/***********************************************
		Exercise 1.31 - 1.40
***********************************************/


 /****************** 1.31 **********************/
 
 recursion:
 
 (define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))

(define (pi n)
  (define (next n) (+ 2 n))
  
  (define (even-term a) (/ a (- a 1)))
  (define (odd-term a) (/ a (+ a 1)))
  (- (* 4
        (product odd-term 2 next n)
        (product even-term 4 next n))
     0.1
	 -0.1)) ; to print out by decimal representation
	 
 iteration:
 
 (define (product term a next b)
  (define (inner-loop index result)
    (if (> index b)
        result
        (inner-loop (next index) (* (term index)
                                    result))))
  (inner-loop a 1))

(define (pi n)
  (define (next n) (+ 2 n))
  
  (define (even-term a) (/ a (- a 1)))
  (define (odd-term a) (/ a (+ a 1)))
  (- (* 4
        (product odd-term 2 next n)
        (product even-term 4 next n))
     0.1
     -0.1))
  
 /****************** 1.32 **********************/
 
 recursion:
 
 (define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) b))))
 
 iteration:
 
 (define (accumulate combiner null-value term a next b)
  (define (inner-loop index result)
    (if (> index b)
        result
        (inner-loop (next index) (combiner (term index)
                                           result))))
  (inner-loop a null-value))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))
  
  
  /****************** 1.33 **********************/
 
 a:
 
(define (filtered-accumulate combiner null-value filter
                             term a next b)
  (define (inner-loop index result)
    (if (> index b)
        result
        (inner-loop (next index) (if (filter index)
                                     (combiner (term index)
                                               result)
                                     result))))
  (inner-loop a null-value))

(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (square n) (* n n))
  (define (divides? a b)
    (= (remainder b a) 0))
  
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (square-sum a b) (+ (* a a) b))

(define (primes-square-sum a b)
  (filtered-accumulate square-sum
                       0
                       prime?
                       (lambda (x) x)
                       a
                       (lambda (x) (+ x 1))
                       b))
					   
 b:
 
 (define (filtered-accumulate combiner null-value filter
                             term a next b)
  (define (inner-loop index result)
    (if (> index b)
        result
        (inner-loop (next index) (if (filter index)
                                     (combiner (term index)
                                               result)
                                     result))))
  (inner-loop a null-value))


(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (relative-prime? a b)
  (= 1 (gcd a b)))

(define (product-relative-prime n)
  (filtered-accumulate *
                       1
                       (lambda (a) (relative-prime? a n))
                       (lambda (x) x)
                       1
                       (lambda (x) (+ 1 x))
                       n))
 
 
 /****************** 1.34 **********************/
  
 it print a error
 
 
 /****************** 1.35 **********************/
 
 > (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
 1.6180327868852458
 ; procedure can be found in text book.
 
 
 /****************** 1.36 **********************/
 
 (define tolerance 0.00001)

(define (fixed-point f frist-guess)
  
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  
  (define (try guess count)
    (let ((next (f guess)))
      (display count)(display " -> ")
      (display guess)
      (newline)
      (if (close-enough? guess next)
          next
          (try next (+ 1 count)))))
  
  (try frist-guess 0))
 
 (define (f x) (/ (log 1000) (log x)))
 (define (f-d x) (average x
                          (f x)))

 
 
 > (fixed-point f 2.0)
0 -> 2.0
1 -> 9.965784284662087
2 -> 3.004472209841214
3 -> 6.279195757507157
4 -> 3.759850702401539
5 -> 5.215843784925895
6 -> 4.182207192401397
7 -> 4.8277650983445906
8 -> 4.387593384662677
9 -> 4.671250085763899
10 -> 4.481403616895052
11 -> 4.6053657460929
12 -> 4.5230849678718865
13 -> 4.577114682047341
14 -> 4.541382480151454
15 -> 4.564903245230833
16 -> 4.549372679303342
17 -> 4.559606491913287
18 -> 4.552853875788271
19 -> 4.557305529748263
20 -> 4.554369064436181
21 -> 4.556305311532999
22 -> 4.555028263573554
23 -> 4.555870396702851
24 -> 4.555315001192079
25 -> 4.5556812635433275
26 -> 4.555439715736846
27 -> 4.555599009998291
28 -> 4.555493957531389
29 -> 4.555563237292884
30 -> 4.555517548417651
31 -> 4.555547679306398
32 -> 4.555527808516254
33 -> 4.555540912917957
4.555532270803653
> (fixed-point f-d 2.0)
0 -> 2.0
1 -> 5.9828921423310435
2 -> 4.922168721308343
3 -> 4.628224318195455
4 -> 4.568346513136242
5 -> 4.5577305909237005
6 -> 4.555909809045131
7 -> 4.555599411610624
8 -> 4.5555465521473675
4.555537551999825
 
 
 /****************** 1.37 **********************/
 
 iteration:
 
 (define (continued-fraction f-d f-n n)
  
  (define (inner-loop index result)
    (if (< index 1)
        result
        (inner-loop (- index 1) (/ (f-n index)
                                   (+ (f-d index)
                                      result)))))
  (+ (inner-loop n 0)
     0.1
     -0.1))
 
 recursion:
 
 (define (cont-frac n f k)

  (define (inner-loop index)
    (if (> index k)
        1
        (/ (n index)
           (+ (n index)
              (inner-loop (+ index 1))))))
  (inner-loop 1))
  
 
 /****************** 1.38 **********************/ 
  
  (define (cont-frac f-d f-n n)
  
  (define (inner-loop index result)
    (if (< index 1)
        result
        (inner-loop (- index 1) (/ (f-n index)
                                   (+ (f-d index)
                                      result)))))
  (+ (inner-loop n 0)
     0.1
     -0.1))

(define (d i)
  (if (= 0 (remainder (+ i 1) 3))
      (* 2 (/ (+ i 1) 3))
      1))

(define (n i) 1)

(define (e k)
  (+ (cont-frac d n k)
     2))
 
 /****************** 1.39 **********************/ 
 
 (define (cont-frac f-d f-n n)
  
  (define (inner-loop index result)
    (if (< index 1)
        result
        (inner-loop (- index 1) (/ (f-n index)
                                   (+ (f-d index)
                                      result)))))
  (+ (inner-loop n 0)
     0.1
     -0.1))

(define (tan-cf x k)
  (define (n index)
    (if (= index 1)
        x
        (* x x)))
  
  (define (d index)
    (- (* index 2) 1))
  
  (cont-frac d n k))
 
 
 /****************** 1.40 **********************/ 
 
 (define (cubic a b c)
  (lambda (x) (+ (* x x x)
                 (* a (* x x))
                 (* b x)
                 c)))
 
 
 
 
 
 
 
 
 
 
 
 
 